import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'
    }
}

/** Plugins **/
plugins {
    id 'jacoco'
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "de.undercouch.download" version "4.1.1"
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'com.palantir.git-version' version '0.12.3'
    id 'net.researchgate.release' version '3.0.2'
    id "org.jetbrains.kotlin.jvm" version "1.8.21"
}


repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url "https://oss.jfrog.org/artifactory/libs-snapshot" }
    maven { url "https://oss.jfrog.org/artifactory/libs-release" }
    flatDir {
        dirs 'localLibs'
    }
}

/** Package description **/
group = "org.grobid"
description = """Grobid module for extraction of superconductor information from scientific related literature"""

/** Dependencies **/

dependencies {
    //Tests
    testImplementation(platform('org.junit:junit-bom:5.8.1'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation("junit:junit:4.13.2")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine") {
        because 'allows JUnit 3 and JUnit 4 tests to run'
    }

    testRuntimeOnly("org.junit.platform:junit-platform-launcher") {
        because 'allows tests to run from IDEs that bundle older version of launcher'
    }
    testImplementation 'org.easymock:easymock:4.3'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'org.powermock:powermock-api-easymock:2.0.9'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    //GROBID and grobid-quantities
    implementation 'org.grobid:grobid-quantities:0.7.3'
    implementation 'org.grobid:grobid-core:0.7.3'
    implementation 'org.grobid:grobid-trainer:0.7.3'
    implementation 'org.grobid:grobid-service:0.7.3'
    implementation "xerces:xercesImpl:2.12.0"
    implementation "net.arnx:jsonic:1.3.10"
    implementation "net.sf.saxon:Saxon-HE:9.6.0-9"
    implementation "xom:xom:1.3.2"
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation 'org.apache.opennlp:opennlp-tools:1.9.1'
    implementation 'black.ninia:jep:4.0.2'
    implementation "org.apache.lucene:lucene-analyzers-common:4.5.1"

    //Apache commons
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.commons:commons-pool2:2.11.1'
    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation 'org.apache.commons:commons-text:1.10.0'

    //Dropwizard
    implementation "io.dropwizard:dropwizard-core:1.3.29"
    implementation 'io.dropwizard:dropwizard-jersey:1.3.29'
    implementation "io.dropwizard:dropwizard-assets:1.3.29"
    implementation "com.hubspot.dropwizard:dropwizard-guicier:1.3.5.2"
    implementation "io.dropwizard:dropwizard-testing:1.3.29"
    implementation "io.dropwizard:dropwizard-forms:1.3.29"
    implementation "io.dropwizard:dropwizard-client:1.3.29"
    implementation "io.dropwizard:dropwizard-auth:1.3.29"
    implementation "io.dropwizard.metrics:metrics-core:4.0.0"
    implementation "io.dropwizard.metrics:metrics-servlets:4.0.0"

    //Misc
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.apache.httpcomponents:httpmime:4.5.13'
    implementation 'javax.activation:activation:1.1.1'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    implementation 'com.sun.xml.bind:jaxb-core:4.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:4.0.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-guava:2.13.4'

    implementation 'org.dkpro.statistics:dkpro-statistics:2.2.1'
    implementation 'org.dkpro.statistics:dkpro-statistics-agreement:2.2.1'

    // XML
    implementation 'org.codehaus.woodstox:stax2-api:4.2.1'
    implementation 'com.fasterxml.woodstox:woodstox-core:6.3.1'
}


configurations {
    implementation.exclude group: "org.slf4j", module: "slf4j-jdk14"
    implementation.exclude group: 'org.slf4j', module: "slf4j-log4j12"
    implementation.exclude group: 'log4j', module: "log4j"
}

configurations.all {
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.4.01'
    }
}

/** Other configuration **/
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    //    options.compilerArgs << "-Xlint:deprecation"
    //    options.compilerArgs << "-Xlint:unchecked"
}

sourceSets.main.resources {
    srcDirs = ["src/main/resources", "resources/config"]
}

test {
    exclude '**/**IntegrationTest**'
    useJUnitPlatform()
    maxHeapSize = "1024m"

    def libraries = ""
    if (Os.isFamily(Os.FAMILY_MAC)) {
        if (Os.OS_ARCH.equals("aarch64")) {
            libraries = "${file("./grobid-home/lib/mac_arm-64").absolutePath}"
        } else {
            libraries = "${file("./grobid-home/lib/mac-64").absolutePath}"
        }
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        def jepDir = rootProject.rootDir.getAbsolutePath() + "/grobid-home/lib/lin-64/jep"
        libraries = jepDir
        jepDir = rootProject.rootDir.getAbsolutePath() + "/grobid-home/lib/lin-64"
        libraries += ":" + jepDir
    } else {
        throw new RuntimeException("Unsupported platform!")
    }

    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs "--add-opens", "java.base/java.util.stream=ALL-UNNAMED",
            "--add-opens", "java.base/java.io=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang=ALL-UNNAMED",
            "--add-opens", "java.base/java.util.regex=ALL-UNNAMED",
            "--add-opens", "java.base/java.math=ALL-UNNAMED",
            "--add-opens", "java.base/java.text=ALL-UNNAMED"
    }
    systemProperty "java.library.path", "${System.getProperty('java.library.path')}:" + libraries
}

tasks.run.workingDir = rootProject.rootDir

mainClassName = 'org.grobid.service.GrobidSuperconductorsApplication'

run {
    args = ['server', 'resources/config/config.yml']

    def libraries = ""
    if (Os.isFamily(Os.FAMILY_MAC)) {
        if (Os.OS_ARCH.equals("aarch64")) {
            libraries = "${file("../grobid-home/lib/mac_arm-64").absolutePath}"
        } else {
            libraries = "${file("../grobid-home/lib/mac-64").absolutePath}"
        }
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        libraries = "${file("../grobid-home/lib/lin-64/jep").absolutePath}:" +
            "${file("../grobid-home/lib/lin-64").absolutePath}:"
    } else {
        throw new RuntimeException("Unsupported platform!")
    }

    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    }
    workingDir = rootProject.rootDir
    def javaLibraryPath = "${System.getProperty('java.library.path')}:" + libraries

    systemProperty "java.library.path", javaLibraryPath
}

task integration(type: Test) {
    include '**'

    maxHeapSize = "1024m"

    def libraries = ""
    if (Os.isFamily(Os.FAMILY_MAC)) {
        if (Os.OS_ARCH.equals("aarch64")) {
            libraries = "${file("./grobid-home/lib/mac_arm-64").absolutePath}"
        } else {
            libraries = "${file("./grobid-home/lib/mac-64").absolutePath}"
        }
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        def jepDir = rootProject.rootDir.getAbsolutePath() + "/grobid-home/lib/lin-64/jep"
        libraries = jepDir
        jepDir = rootProject.rootDir.getAbsolutePath() + "/grobid-home/lib/lin-64"
        libraries += ":" + jepDir
    } else {
        throw new RuntimeException("Unsupported platform!")
    }

    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
//        jvmArgs "--add-opens", "java.base/java.util.stream=ALL-UNNAMED",
//            "--add-opens", "java.base/java.io=ALL-UNNAMED",
//            "--add-opens", "java.base/java.lang=ALL-UNNAMED",
//            "--add-opens", "java.base/java.util.regex=ALL-UNNAMED",
//            "--add-opens", "java.base/java.math=ALL-UNNAMED",
//            "--add-opens", "java.base/java.text=ALL-UNNAMED"
    }
    systemProperty "java.library.path", "${System.getProperty('java.library.path')}:" + libraries
}


/** Training configuration **/

//def trainerTasks = [
//    //Training models
//    "train-superconductors": "org.grobid.trainer.SuperconductorsTrainer",
//    "train-material": "org.grobid.trainer.MaterialTrainer",
//    "train-entityLinker-material_tc": "org.grobid.trainer.EntityLinkerMaterialTcTrainer",
//    "train-entityLinker-tc-pressure": "org.grobid.trainer.EntityLinkerTcPressureTrainer",
//    "train-entityLinker-tc-meMethod": "org.grobid.trainer.EntityLinkerTcMeMethodTrainer"
//]
//
//trainerTasks.each { taskName, mainClassName ->
//    tasks.create(name: taskName, type: JavaExec, group: 'training') {
//        main = mainClassName
//        classpath = sourceSets.main.runtimeClasspath
//    }
//}

//def getVersionName = { ->
//    def stdout = new ByteArrayOutputStream() exec { commandLine 'git', 'describe', ' tags ' standardOutput = stdout }
//    return stdout.toString().trim() 
//}

processResources {
    filesMatching(["version.txt", "revision.txt"]) {
        expand(project_version: project.property('version'),
            project_revision: gitVersion())
    }
}

//// return the default value if the property has not been specified in command line
//ext.getArg = { propName, defaultVal ->
//    return project.hasProperty(propName) ? project.getProperty(propName) : defaultVal;
//}

/*** Packaging and distribution ***/

shadowJar {
    mainClassName = "org.grobid.service.GrobidSuperconductorsApplication"
    archiveClassifier = "onejar"
    mergeServiceFiles()
    zip64 true
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
}

jar {
    enabled false
}

artifacts {
    archives shadowJar
//    archives jar
}

//distZip.archiveClassifier = 'application'
//distTar.archiveClassifier = 'application'

distZip.enabled = true
distTar.enabled = false
shadowDistZip.enabled = false
shadowDistTar.enabled = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

def conf = new org.yaml.snakeyaml.Yaml().load( new File("resources/config/config.yml").newInputStream() )
def grobidHome = conf.grobidHome.replace("\$", "").replace('{', "").replace("GROBID_HOME:- ", "").replace("}", "")

/** Model management **/

task copyModels(type: Copy) {
    from "${rootDir}/resources/models"
    include "**/*.wapiti"
    include "**/*.wapiti.gz"
    include "**/config.json"
    include "**/transformer-config.json"
    include "**/transformer-tokenizer/**"
    include "**/model_weights.hdf5"
    include "**/preprocessor.json"
    exclude "**/features-engineering/**"
    exclude "**/result-logs/**"
    into "${rootDir}/${grobidHome}/models/"

    doLast {
        print "Copy models under grobid-home: ${grobidHome}"
        ant.gunzip(src: "${rootDir}/${grobidHome}/models/superconductors/model.wapiti.gz", dest: "${rootDir}/${grobidHome}/models/superconductors/")
    }
}

task downloadTransformers(dependsOn: copyModels) {
    doLast {
        download {
            src "https://transformers-data.s3.eu-central-1.amazonaws.com/superconductors-transformers-230222.zip"
            dest "${rootDir}/${grobidHome}/models/superconductors-transformers.zip"
            overwrite false
            print "Download bulky transformers files under grobid-home: ${grobidHome}"
        }
        ant.unzip(src: "${rootDir}/${grobidHome}/models/superconductors-transformers.zip", dest: "${rootDir}/${grobidHome}/models/")
    }
}


wrapper {
    gradleVersion "7.2"
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
    dependsOn test // tests are required to run before generating the report
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}

release {
    failOnUnversionedFiles = false
    failOnCommitNeeded = false
    tagTemplate = 'v${version}'
    git {
        requireBranch.set('master')
    }
}


